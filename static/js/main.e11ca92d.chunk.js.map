{"version":3,"sources":["img/pdf/diagram.png","web3Connection.js","Contract.js","Election.js","components/Home.js","utils/SignData.js","utils/AuthenticationHash.js","components/SignUp.js","utils/AuthValidation.js","components/SignIn.js","components/SignOut.js","components/UserAccount.js","components/DateTimeDisplay.js","hooks/useCountdown.js","components/CountdownTimer.js","components/Admin.js","components/Voting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","web3Connection","web3","window","ethereum","Web3","Contract","eth","net","getId","networkId","deployedNetwork","Authentication","networks","abi","address","Election","Home","className","Grid","Row","Column","Divider","divided","columns","width","centered","Image","src","img","List","bulleted","Item","Component","SignData","username","accountAddress","personal","sign","err","signature","signedData","accounts","hashMessage","AuthenticationHash","password","digiCode","signedMessage","passwordDigiCodeHash","SignUp","state","digicode","alertMessage","status","signedUp","isloading","onSignUp","trim","length","setState","props","contract","methods","getUserAddress","call","from","account","hash","register","send","then","catch","e","code","toast","error","hideProgressBar","theme","error_msg","JSON","parse","message","split","accountCreated","toastStyle","backgroundColor","isLoading","this","Card","fluid","Content","Form","size","Message","negative","positive","console","log","Field","required","type","placeholder","value","autoComplete","onChange","target","Button","primary","onClick","to","AuthValidation","toLowerCase","getSignatureHash","hashFromContract","SignIn","loggedIn","onSignIn","usernameToSend","userSignedIn","SignOut","componentDidMount","loggedOut","client","create","host","port","protocol","UserAccount","fetch_userAccount","bind","retrieveFile","registerCandidate","handleSubmit","Number","addressmap","voter_exist_id","candidates","candidate","candidate_id","id","approved","url","image_addr","localStorage","setItem","name","disable","buttonText","username_pretty","charAt","toUpperCase","slice","gas","res","data","files","filename","reader","FileReader","readAsArrayBuffer","onloadend","file","result","preventDefault","img_text","img_button_disable","add","created","path","stackable","style","height","alt","Input","color","disabled","Header","Meta","Description","Icon","extra","DateTimeDisplay","isDanger","getReturnValues","countDown","Math","floor","ExpiredNotice","ShowCounter","days","hours","minutes","seconds","CountdownTimer","targetDate","countDownDate","Date","getTime","useState","setCountDown","useEffect","interval","setInterval","clearInterval","useCountdown","votingProcess","Admin","_isMounted","fetch_candidates_data","dateNow","candidatesCount","candidates_count","startTime","endTime","approved_candidates_count","arr","i","push","unapproved_candidates","approve","event","persist","tx","innerText","background","startVoting","startVote","votingTimePeriod","stopVoting","stopVote","handleInputChange","action","labelPosition","icon","content","actionPosition","defaultValue","map","index","key","candidate_address","Voting","hasVoted","gift_claimed","approved_candidates","fetch_election_results","display_results","voting_result","voteCount","keys","Object","sort","a","b","votingResult","results_button_text","voters","voted","voted_id","cast_vote","vote","claim_gift","claim_gift_text","claim_gift_disabled","getItem","userId","floated","App","handleItemClick","activeItem","auth_contract","election_contract","request","method","contract_owner","admin_address_upper","admin_address","start","alert","getAccount","undefined","on","removeItem","balance","Menu","inverted","secondary","active","as","Link","position","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e11ca92d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diagram.b7d3d0cf.png\";","import Web3 from 'web3';\n\nconst web3Connection = async () => {\n    let web3;\n    typeof window.ethereum !== 'undefined' ?\n        web3 = new Web3(window.ethereum) :\n        typeof window.web3 !== 'undefined' ?\n            web3 = window.web3 :\n            web3 = new Web3('http://localhost:8545');\n\n    return web3;\n}\n\nexport default web3Connection;","import Authentication from \"./contracts/Authentication.json\";\n\nconst Contract = async (web3) => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Authentication.networks[networkId];\n    return new web3.eth.Contract(\n        Authentication.abi,\n        deployedNetwork && deployedNetwork.address\n    );\n}\n\nexport default Contract;\n","import Election from \"./contracts/Election.json\";\n\nconst Contract = async (web3) => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Election.networks[networkId];\n    return new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address);\n}\n\nexport default Contract;\n","import React, { Component } from 'react';\nimport { Grid, List, Divider, Image } from 'semantic-ui-react';\nimport '../App.css';\nimport img from '../img/pdf/diagram.png';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className='home-page'>\n              <Grid.Row>\n                <div className=\"homeHeader\">Decentralized e-Voting App [dApp]</div>\n              </Grid.Row>\n              <Grid.Row>\n                  <Grid.Column>\n                      This is a demonstration of a Blockchain based authentication and decentralized e-Voting process.\n                      In this project login information are not stored in a database, but the\n                      hash resulting from login data is stored on a smart contract[Authentication].\n                      <br/>\n                      Another solidity contract[Election] is used for storing the electors as candidates and\n                      the voting process is taken care by Admin.\n                      At the end of the voting period the results are declared and winning candidate then claims &nbsp;\n                      <strong>1 Ether</strong> as prize money[unlocked from the Smart Contract].\n                  </Grid.Column>\n              </Grid.Row>\n              <Divider/>\n              <Grid divided='vertically'>\n                <Grid.Row columns={2}>\n                  <Grid.Column width={8}>\n                    <Grid.Row>\n                      <span className=\"heading\">Authentication Module</span>\n                    </Grid.Row>\n                    <br/>\n                    <Grid.Row centered>\n                      <Image src={img}/>\n                    </Grid.Row>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Grid.Row>\n                      <span className=\"heading\">Voting Module</span>\n                    </Grid.Row>\n                    <br/>\n                    <Grid divided='vertically'>\n                      <Grid.Row columns={2}>\n                          <Grid.Column>\n                            <Grid.Row>\n                              <span className=\"subHeading\">Admin[Contract Owner]</span>\n                            </Grid.Row>\n                            <br/>\n                            <Grid.Row>\n                              <List bulleted>\n                                <List.Item>Approval of Candidates</List.Item>\n                                <List.Item>Start Voting Period</List.Item>\n                                <List.Item>End Election [again election can be organised]</List.Item>\n                              </List>\n                            </Grid.Row>\n                          </Grid.Column>\n                          <Grid.Column>\n                            <Grid.Row>\n                              <span className=\"subHeading\">Candidate</span>\n                            </Grid.Row>\n                            <br/>\n                            <Grid.Row>\n                              <List bulleted>\n                                <List.Item>SignIn/SignUp  as Elector</List.Item>\n                                <List.Item>Register as Candidate</List.Item>\n                                <List.Item>Upload ID-proof <strong>via IPFS</strong></List.Item>\n                                <List.Item>Participate in e-Voting</List.Item>\n                                <List.Item>Check Results</List.Item>\n                                <List.Item>Winner claims Prize[i.e 1 Ether]</List.Item>\n                              </List>\n                            </Grid.Row>\n                          </Grid.Column>\n                      </Grid.Row>\n                    </Grid>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","const SignData = async (username, accountAddress, web3) => {\n    let signedData;\n\n    await web3.eth.personal.sign(\n        username,\n        accountAddress,\n        (err, signature) => {\n            if (err) {\n                signedData = err;\n            } else {\n                signedData = web3.eth.accounts.hashMessage(signature);\n            }\n        }\n    );\n\n    return signedData;\n}\n\nexport default SignData;","import SignData from './SignData';\n\nconst AuthenticationHash = async (username, accountAddress, password, digiCode, web3) => {\n    let signedMessage = await SignData(username, accountAddress, web3);\n    let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\n\n    return await web3.eth.accounts.hashMessage(signedMessage + passwordDigiCodeHash);\n}\n\nexport default AuthenticationHash;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Card, Message } from 'semantic-ui-react';\nimport AuthenticationHash from '../utils/AuthenticationHash';\nimport \"../App.css\";\nimport LoadingAnimation from 'react-circle-loading-animation';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass SignUp extends Component {\n    state = {\n        username: '',\n        password: '',\n        digicode: '',\n        alertMessage: '',\n        status: '',\n        signedUp: false,\n        isloading:false\n    }\n\n    onSignUp = async () => {\n        if (this.state.username !== '' && this.state.password !== '' && this.state.digicode !== '') {\n            let username = this.state.username.trim();\n            let password = this.state.password.trim();\n            let digicode = this.state.digicode.trim();\n\n            if (password.length < 8)\n              {\n                  this.setState({\n                      alertMessage: \"at least 8 characters for password\",\n                      status: 'failed',\n                      password: '',\n                      digicode: '',\n                  });\n                  return;\n              }\n             if (digicode.length !== 6)\n               {\n                  this.setState({\n                      alertMessage: \"6 digit required for digicode\",\n                      status: 'failed',\n                      digicode: ''\n                  });\n                  return\n              }\n              else\n              {\n                let userAddress = await this.props.contract.methods.getUserAddress().call({ from: this.props.account });\n\n                if (userAddress !== '0x0000000000000000000000000000000000000000') {\n                    this.setState({\n                        alertMessage: 'This account already exists',\n                        status: 'failed',\n                        username: '',\n                        password: '',\n                        digicode: '',\n                    });\n\n                    return;\n                } else {\n                    this.setState({isloading: true});\n                    let hash = await AuthenticationHash(username, this.props.account, password, digicode, this.props.web3);\n\n                    await this.props.contract.methods.register(hash).send({ from: this.props.account }).then(()=>{\n                      this.setState({isloading: false});\n                    }).catch(e => {\n                      if (e.code === 4001){\n                         this.setState({isloading: false});\n                         toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n                      }\n                      else if (e.code === -32603)\n                      {\n                        this.setState({isloading: false});\n                        var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n                       toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n                      }\n                    });\n\n                    this.setState({\n                        username: '',\n                        password: '',\n                        digicode: '',\n                        status: 'success',\n                        alertMessage: \"Signup successful\",\n                        signedUp: true\n                    });\n\n                    this.props.accountCreated(this.state.signedUp);\n                    return;\n                }\n              }\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"sign-up\">\n                <ToastContainer toastStyle={{ backgroundColor: \"#327F94\" }}/>\n                <LoadingAnimation isLoading={this.state.isloading} />\n                <h1 className=\"header\">Create an account</h1>\n                <div className='signup-form'>\n                    <Card fluid centered>\n                        <Card.Content>\n                            <Form size='large'>\n                                {\n                                    this.state.alertMessage !== '' && this.state.status === 'failed' ?\n                                        <Message negative>\n                                            {this.state.alertMessage}\n                                        </Message> :\n                                        this.state.alertMessage !== '' && this.state.status === 'success' ?\n                                            <Message positive>\n                                                {this.state.alertMessage}\n                                            </Message> :\n                                            console.log('')\n                                }\n                                <Form.Field>\n                                    <input\n                                        required\n                                        type='text'\n                                        placeholder='Username'\n                                        value={this.state.username}\n                                        autoComplete=\"username\"\n                                        onChange={e => this.setState({ username: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <input\n                                        required\n                                        type='password'\n                                        placeholder='Password'\n                                        value={this.state.password}\n                                        autoComplete=\"current-password\"\n                                        onChange={e => this.setState({ password: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <input\n                                        required\n                                        type='text'\n                                        placeholder='National Identification No. (6 Digits)'\n                                        value={this.state.digicode}\n                                        autoComplete=\"digicode\"\n                                        onChange={e => this.setState({ digicode: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Button type='submit' primary fluid size='large' onClick={this.onSignUp}>\n                                        Create account\n                                    </Button>\n                                </Form.Field>\n                            </Form>\n                        </Card.Content>\n                    </Card>\n                    <div className=\"signin-onUp\">\n                        Already have an account? <Link to='/e-Voting-dApp/sign-in'>Sign in</Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SignUp\n","import SignData from './SignData';\n\nconst AuthValidation = async (username, accountAddress, password, digiCode, web3, contract) => {\n\n    let userAddress = await contract.methods.getUserAddress().call({ from: accountAddress });\n\n    if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\n        return false;\n    } else {\n        let signedData = await SignData(username, accountAddress, web3);\n        let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\n\n        let hash = await web3.eth.accounts.hashMessage(signedData + passwordDigiCodeHash);\n\n        // get hash from the contract\n        let hashFromContract = await contract.methods.getSignatureHash().call({ from: accountAddress });\n\n        if (hash === hashFromContract) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default AuthValidation;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Card, Message } from 'semantic-ui-react';\nimport AuthValidation from '../utils/AuthValidation';\nimport \"../App.css\";\nimport LoadingAnimation from 'react-circle-loading-animation';\n\nclass SignIn extends Component {\n    state = {\n        username: '',\n        password: '',\n        digicode: '',\n        alertMessage: '',\n        status: '',\n        loggedIn: false,\n        isloading:false\n    }\n\n    onSignIn = async () => {\n\n        if (this.state.username !== '' && this.state.password !== '' && this.state.digicode !== '') {\n            let username = this.state.username.trim();\n            let password = this.state.password.trim();\n            let digicode = this.state.digicode.trim();\n\n            let usernameToSend = username;\n\n            if (password.length < 8)\n            {\n                this.setState({\n                    alertMessage: \"at least 8 characters for password\",\n                    status: 'failed',\n                    password: '',\n                    digicode: '',\n                });\n                return;\n            }\n             if (digicode.length !== 6)\n             {\n                this.setState({\n                    alertMessage: \"National Identification No. (6 Digits)\",\n                    status: 'failed',\n                    digicode: ''\n                });\n                return\n              }\n            else\n            {\n                let userAddress = await this.props.contract.methods.getUserAddress().call({ from: this.props.account });\n\n                if (userAddress === '0x0000000000000000000000000000000000000000') {\n                    this.setState({\n                        alertMessage: 'Account does not exists',\n                        status: 'failed',\n                        username: '',\n                        password: '',\n                        digicode: '',\n                    });\n                    return;\n                } else {\n                    this.setState({isloading: true});\n                    let validated = await\n                        AuthValidation(\n                            username,\n                            this.props.account,\n                            password, digicode,\n                            this.props.web3,\n                            this.props.contract\n                        );\n\n                    if (!validated) {\n                        this.setState({\n                            alertMessage: 'Incorrect log in',\n                            status: 'failed',\n                            username: '',\n                            password: '',\n                            digicode: '',\n                            isloading: false\n                        });\n                        return\n                    } else {\n                        this.setState({\n                            username: '',\n                            password: '',\n                            digicode: '',\n                            status: 'success',\n                            alertMessage: \"Sign in successful\",\n                            loggedIn: true,\n                            isloading: false\n                        });\n\n                        this.props.userSignedIn(\n                            this.state.loggedIn,\n                            usernameToSend\n                        );\n\n                        return;\n                    }\n                }\n            }\n        }\n\n\n        this.setState({\n            username: '',\n            password: '',\n            digicode: ''\n        })\n    }\n    render() {\n        return (\n            <div className=\"sign-up\">\n              <LoadingAnimation isLoading={this.state.isloading} />\n                <h1 className=\"header\">Sign in to your account</h1>\n                <div className='signup-form'>\n                    <Card fluid centered>\n                        <Card.Content>\n                            <Form size='large'>\n                                {\n                                    this.state.alertMessage !== '' && this.state.status === 'failed' ?\n                                        <Message negative>\n                                            {this.state.alertMessage}\n                                        </Message> :\n                                        this.state.alertMessage !== '' && this.state.status === 'success' ?\n                                            <Message positive>\n                                                {this.state.alertMessage}\n                                            </Message> :\n                                            null\n                                }\n                                <Form.Field required>\n                                    <input\n                                        type='text'\n                                        placeholder='Username'\n                                        value={this.state.username}\n                                        autoComplete=\"username\"\n                                        onChange={e => this.setState({ username: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field required>\n                                    <input\n                                        type='password'\n                                        placeholder='Password'\n                                        value={this.state.password}\n                                        autoComplete=\"current-password\"\n                                        onChange={e => this.setState({ password: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field required>\n                                    <input\n                                        type='text'\n                                        placeholder='National Identification No. (6 Digits)'\n                                        value={this.state.digicode}\n                                        autoComplete=\"digicode\"\n                                        onChange={e => this.setState({ digicode: e.target.value })}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Button type='submit' primary fluid size='large' onClick={this.onSignIn}>\n                                        Sign in\n                                    </Button>\n                                </Form.Field>\n\n                            </Form>\n                        </Card.Content>\n                    </Card>\n                    {\n                        this.props.signedUp ?\n                            null :\n                            <div className=\"signin-onUp\">\n                                Don't have an account? <Link to='/e-Voting-dApp/sign-up'>Sign up</Link>\n                            </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SignIn\n","import React, { Component } from 'react';\n\nclass SignOut extends Component {\n    componentDidMount = () => {\n        this.props.loggedOut(false);\n    }\n\n    render() {\n        return (\n            <h1 className=\"header\">\n              You have been logged out\n            </h1>\n        );\n    }\n}\n\nexport default SignOut;\n","import React, { Component } from 'react';\nimport { Card, Grid, Message, Button, Icon, Input } from 'semantic-ui-react';\nimport LoadingAnimation from 'react-circle-loading-animation';\nimport '../App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {create} from 'ipfs-http-client';\n\nconst client = create({ host: \"ipfs.infura.io\", port: 5001, protocol: \"https\"});\n\nclass UserAccount extends Component {\n  constructor() {\n    super();\n    this.state = {\n      disable: false,\n      buttonText: 'Register as Candidate',\n      candidate_id: null ,\n      approved: false,\n      isloading:false,\n      file: null,\n      url: \"\",\n      filename: null,\n      voter_exist_id: 0,\n      img_text: 'Upload IdProof',\n      img_button_disable: false\n    }\n  }\n    componentDidMount = async () => {\n      this.fetch_userAccount();\n\n      this.fetch_userAccount = this.fetch_userAccount.bind(this);\n      this.retrieveFile = this.retrieveFile.bind(this);\n      this.registerCandidate = this.registerCandidate.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    fetch_userAccount = async() => {\n      var voter_exist_id = Number(await this.props.contract.methods.addressmap(this.props.account).call({ from: this.props.account }));\n      this.setState({voter_exist_id: voter_exist_id});\n      if (voter_exist_id !== 0)\n      {\n        var candidate = await this.props.contract.methods.candidates(this.state.voter_exist_id).call({ from: this.props.account });\n        this.setState({\n          candidate_id: candidate.id,\n          approved: candidate.approved,\n          url: candidate.image_addr\n        });\n        window.localStorage.setItem('userId', candidate.id );\n        if(!candidate.approved && candidate.name.length !== 0)\n        {\n          this.setState({\n            disable: true,\n            buttonText: 'Candidate Approval Pending...'});\n        }\n\n      }\n    }\n\n    registerCandidate = async () => {\n      var username_pretty = this.props.username.split('@')[0].charAt(0).toUpperCase() + this.props.username.split('@')[0].toLowerCase().slice(1)\n      this.setState({isloading: true});\n      await this.props.contract.methods.registerCandidate(username_pretty, this.state.url).send({ from: this.props.account, gas: '4700000' }).then((res) => {\n        this.setState({disable: true, buttonText: \"Candidate Approval Pending...\",isloading: false });\n      }).catch(e => {\n        if (e.code === 4001){\n           this.setState({isloading: false});\n           toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n        }\n        else if (e.code === -32603)\n        {\n          this.setState({isloading: false});\n           var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n          toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n        }\n      });\n      var voter_exist_id = Number(await this.props.contract.methods.addressmap(this.props.account).call({ from: this.props.account }));\n      this.setState({voter_exist_id: voter_exist_id });\n    }\n\n     retrieveFile = (e) => {\n      const data = e.target.files[0];\n      this.setState({filename: data.name});\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(data);\n      reader.onloadend = () => {\n        this.setState({file: reader.result});\n      }\n\n      e.preventDefault();\n    }\n\n    handleSubmit = async (e) => {\n      this.setState({img_text: \"Uploading...\", img_button_disable: true});\n      e.preventDefault();\n      try {\n        const created = await client.add(this.state.file);\n        const url = `https://ipfs.infura.io/ipfs/${created.path}`;\n        this.setState({url: url});\n        console.log(this.state);\n        this.setState({img_text: \"Change Image\", img_button_disable: false});\n      } catch (error) {\n        console.log(error);\n        toast.error('File not Found!!!', {hideProgressBar: true,theme: \"white\"});\n        this.setState({img_text: \"Upload Id Proof\", img_button_disable: false});\n      }\n    };\n\n\n    render() {\n        return (\n            <div className='user-account'>\n              <ToastContainer toastStyle={{ backgroundColor: \"#327F94\" }}/>\n              <LoadingAnimation isLoading={this.state.isloading} />\n                <Grid centered stackable>\n                  <h1 className=\"header\">User Profile</h1>\n                    <Grid.Row>\n                        <Grid.Column className=\"pads\">\n                            <Card fluid className=\"userAccount\">\n                              <div className=\"display\" style={{\"margin\": 10}}>\n                                { this.state.url.length !== 0\n                                  ? (<><center><img src={this.state.url} height={250} width={380} alt=\"nfts\"/></center></>)\n                                  : (<><center><img src=\"https://ipfs.infura.io/ipfs/QmRLQCfLJ8VVMNjyUyNjTP8DXYuuAjkWuUG1S1KG4XSm72\" height={200} width={200} alt=\"nfts\"/></center></>)\n                                }\n                              </div>\n                              {this.state.voter_exist_id ?\n                                null\n                                : (<>\n                                  <Grid divided='vertically'>\n                                    <Grid.Row centered columns={2}>\n                                      <Grid.Column width={12}>\n                                        <Input onChange={this.retrieveFile} required type=\"file\" className=\"fileInput\"/>\n                                      </Grid.Column>\n                                      <Grid.Column width={4} className=\"textCenter\" style={{\"marginTop\": 5, \"paddingLeft\": 0}}>\n                                        <Button color='olive' disabled={this.state.img_button_disable} onClick={this.handleSubmit} className=\"imageUpload\">{this.state.img_text}</Button>\n                                      </Grid.Column>\n                                    </Grid.Row>\n                                  </Grid>\n                                </>)}\n\n\n\n                                <Card.Content>\n                                    <Card.Header>{this.props.username}</Card.Header>\n                                    <Card.Meta>\n                                        <strong>{this.state.approved ? \"Candidate\" : \"Voter\"}</strong>\n                                    </Card.Meta>\n                                    <Card.Description>\n                                        <span className=\"name\">Username: <b className=\"name\">\n                                           {this.props.username.split('@')[0].charAt(0).toUpperCase() + this.props.username.split('@')[0].toLowerCase().slice(1)} </b>\n                                        </span>\n                                        <br/><br/>\n                                        {\n                                          this.state.approved ?\n                                          (<>\n                                            <Button color=\"green\" size='large'> <Icon name=\"check\"/>Approved</Button>\n                                        </>)\n                                         :\n                                         <Button primary disabled={this.state.disable} size='large' onClick={this.registerCandidate}>{this.state.buttonText}</Button>\n                                       }\n                                   </Card.Description>\n                               </Card.Content>\n                               <Card.Content extra>\n                                   <Message size='mini'>\n                                       {this.props.account}\n                                   </Message>\n                               </Card.Content>\n                           </Card>\n                       </Grid.Column>\n                   </Grid.Row>\n               </Grid>\n\n           </div>\n       );\n   }\n}\n\nexport default UserAccount;\n","import React from 'react';\n\nconst DateTimeDisplay = ({ value, type, isDanger }) => {\n  return (\n    <div className={isDanger ? 'countdown danger' : 'countdown'}>\n      <p>{value}</p>\n      <span>{type}</span>\n    </div>\n  );\n};\n\nexport default DateTimeDisplay;\n","import { useEffect, useState } from 'react';\n\nconst useCountdown = (targetDate) => {\n  const countDownDate = new Date(targetDate).getTime();\n\n  const [countDown, setCountDown] = useState(\n    countDownDate-Math.floor((new Date().getTime())/1000)\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - Math.floor((new Date().getTime())/1000));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [countDownDate]);\n\n  return getReturnValues(countDown);\n};\n\nconst getReturnValues = (countDown) => {\n  // calculate time left\n  const days = Math.floor(countDown / (60 * 60 * 24));\n  const hours = Math.floor((countDown % ( 60 * 60 * 24)) / ( 60 * 60));\n  const minutes = Math.floor((countDown % (60 * 60)) / 60);\n  const seconds = Math.floor((countDown % ( 60)));\n\n  return [days, hours, minutes, seconds];\n\n};\n\nexport { useCountdown };\n","import React from 'react';\nimport DateTimeDisplay from './DateTimeDisplay';\nimport { useCountdown } from '../hooks/useCountdown';\n\nconst ExpiredNotice = () => {\n  return (\n    <div className=\"expired-notice\">\n      <span>Voting Time Expired!!!</span>\n    </div>\n  );\n};\n\nconst ShowCounter = ({ days, hours, minutes, seconds }) => {\n  return (\n    <div className=\"show-counter\">\n      <div className=\"countdown-link\">\n        <DateTimeDisplay value={days} type={'Days'} isDanger={true} />\n        <p>:</p>\n        <DateTimeDisplay value={hours} type={'Hours'} isDanger={true} />\n        <p>:</p>\n        <DateTimeDisplay value={minutes} type={'Mins'} isDanger={true} />\n        <p>:</p>\n        <DateTimeDisplay value={seconds} type={'Seconds'} isDanger={true} />\n      </div>\n    </div>\n  );\n};\n\nconst CountdownTimer = (props) => {\n  const [days, hours, minutes, seconds] = useCountdown(Number(props.targetDate));\n  if(days + hours + minutes + seconds < -19000)\n  {\n    return(null);\n  }\n  else if (days + hours + minutes + seconds <=0) {\n    return (\n      props.votingProcess ? <ExpiredNotice  /> : null\n    );\n  }\n   else {\n    return (\n      <ShowCounter\n        days={days}\n        hours={hours}\n        minutes={minutes}\n        seconds={seconds}\n      />\n\n    );\n  }\n};\n\nexport default CountdownTimer;\n","import React, { Component } from 'react';\nimport { Card, Grid, Button, Input, Message } from 'semantic-ui-react';\nimport '../App.css';\nimport CountdownTimer from './CountdownTimer';\nimport LoadingAnimation from 'react-circle-loading-animation';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      candidate_id: null ,\n      candidates_count: 0,\n      unapproved_candidates: [],\n      color: 'blue',\n      startTime: 1,\n      endTime: 1,\n      votingProcess: false,\n      votingTimePeriod: 1,\n      isloading:false,\n      dateNow: Math.floor((new Date().getTime())/1000)\n    }\n\n  }\n    componentDidMount = async () => {\n      this._isMounted = true;\n      this.fetch_candidates_data();\n      this.interval = setInterval(() => this.setState({dateNow : Math.floor((new Date().getTime())/1000)}), 1000);\n\n    }\n\n    componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n\n    fetch_candidates_data = async() => {\n        var candidates_count = await this.props.contract.methods.candidatesCount().call({ from: this.props.account });\n        var startTime = await this.props.contract.methods.startTime().call({ from: this.props.account });\n        var endTime = await this.props.contract.methods.endTime().call({ from: this.props.account });\n        var votingProcess = await this.props.contract.methods.votingProcess().call({ from: this.props.account });\n        var approved_candidates_count = await this.props.contract.methods.approved_candidates_count().call({ from: this.props.account });\n\n        this.setState({\n          candidates_count: Number(candidates_count),\n          startTime: Number(startTime),\n          endTime: Number(endTime),\n          votingProcess,\n          approved_candidates_count\n        });\n\n        var arr = [];\n        var approved_arr = [];\n        for(var i=1; i<= this.state.candidates_count; i++ )\n        {\n          var candidate = await this.props.contract.methods.candidates(i).call({ from: this.props.account });\n          if(!candidate.approved)\n          {\n            arr.push(candidate);\n          }\n        }\n        this.setState({unapproved_candidates: arr});\n    }\n\n    approve= async (event) => {\n        this.setState({isloading: true});\n        event.persist();\n        await this.props.contract.methods.approve(event.target.id).send({ from: this.props.account, gas: '4700000' }).then((tx)=>{\n          console.log(tx);\n          this.setState({isloading: false});\n          event.target.innerText = \"Approved\";\n          event.target.disabled = 1;\n          event.target.style.background = \"green\";\n        }).catch(e => {\n          if (e.code === 4001){\n             this.setState({isloading: false});\n             toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n          }\n          else if (e.code === -32603)\n          {\n            this.setState({isloading: false});\n            var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n           toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n          }\n        });\n\n\n    }\n\n    startVoting = async()=> {\n      this.setState({isloading: true});\n      await this.props.contract.methods.startVote(this.state.votingTimePeriod).send({ from: this.props.account }).then(()=>{\n        this.setState({isloading: false});\n      }).catch(e => {\n        if (e.code === 4001){\n           this.setState({isloading: false});\n           toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n        }\n        else if (e.code === -32603)\n        {\n          this.setState({isloading: false});\n          var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n         toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n        }\n      });\n      var endTime = await this.props.contract.methods.endTime().call({ from: this.props.account });\n\n      this.setState({votingProcess: true, endTime: endTime});\n      console.log(this.state);\n    }\n\n    stopVoting = async()=> {\n      this.setState({isloading: true});\n      await this.props.contract.methods.stopVote().send({ from: this.props.account }).then(()=>{\n        this.setState({isloading: false,votingProcess: false});\n      }).catch(e => {\n        if (e.code === 4001){\n           this.setState({isloading: false});\n           toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n        }\n        else if (e.code === -32603)\n        {\n          this.setState({isloading: false});\n          var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n         toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n        }\n      });\n    }\n\n    handleInputChange = e => {\n      this.setState({ votingTimePeriod: e.target.value });\n    };\n\n    render() {\n        return (\n            <div className='user-account'>\n              <ToastContainer toastStyle={{ backgroundColor: \"#327F94\" }}/>\n              <LoadingAnimation isLoading={this.state.isloading} />\n              <Grid stackable>\n                <Grid.Row centered>\n                  <Grid.Column className=\"textCenter\">\n                    {\n                       (this.state.approved_candidates_count >=2 && this.state.endTime == 0 ?  <h1 className=\"header\">Start Election</h1>\n                      : (this.state.endTime < this.state.dateNow && this.state.endTime !== 0) ? <h1 className=\"header\">Election Over</h1>\n                      : (this.state.endTime > this.state.dateNow && this.state.votingProcess) ? <h1 className=\"header\">Election Inprogress</h1>\n                      : this.state.unapproved_candidates.length ===0 ? <h1 className=\"header\">No Pending Candidates</h1>\n                      : <h1 className=\"header\">Pending Canidates</h1>\n                      )\n                    }\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                {\n                  (<>\n                  <Grid columns={this.state.unapproved_candidates.length <= 3 ? this.state.unapproved_candidates.length : 4} divided>\n\n                    {\n                      (this.state.endTime === 0 && this.state.startTime === 0 && !this.state.votingProcess && this.state.approved_candidates_count >= 2) ?\n                        <Grid.Row centered>\n                          <Grid.Column className=\"textCenter\">\n                            <Input action={{\n                                color: 'teal',\n                                labelPosition: 'left',\n                                icon: 'clock outline',\n                                content: 'Start Voting',\n                                onClick: () => this.startVoting()\n                              }}\n                            type=\"number\"\n                            onChange={this.handleInputChange}\n                            actionPosition='left'\n                            defaultValue={this.state.votingTimePeriod}\n                            placeholder='Time period (mins)'\n                            />\n                          </Grid.Column>\n                        </Grid.Row>\n                      :\n                      (\n                          <>\n                            {\n                                ((this.state.dateNow > this.state.endTime) && this.state.votingProcess)?\n                              (\n\n                                <>\n                                <Grid.Row centered>\n                                  <Grid.Column className=\"textCenter\">\n                                    <Button color='red' size=\"large\" onClick={this.stopVoting}>End Election</Button>\n                                  </Grid.Column>\n                                </Grid.Row>\n                                </>\n                              )\n                              :\n                              (\n                                  <>\n                                    <Grid.Row centered>\n                                      <Grid.Column>\n                                        <CountdownTimer targetDate={this.state.endTime} votingProcess={this.state.votingProcess} />\n                                      </Grid.Column>\n                                    </Grid.Row>\n                                  </>\n                              )\n                            }\n                          </>\n                        )\n                      }\n                      <Grid.Row>\n                      {\n                          (\n                            this.state.unapproved_candidates.map((candidate, index) => {\n                              return(\n                                <>\n                                  <Grid.Column key={index} className=\"pads\">\n                                      <Card fluid className={this.state.unapproved_candidates.length <= 2 ? \"userAccount\" :\"adminCards\"}>\n                                        <div className=\"display\" style={{\"margin\": 10}}>\n                                          { candidate.image_addr.length !== 0\n                                            ? (<><center><img src={candidate.image_addr} height={250} width={this.state.unapproved_candidates.length<=2 ? 380 : 280} alt=\"nfts\"/></center></>)\n                                            : (<><center><img src=\"https://ipfs.infura.io/ipfs/QmRLQCfLJ8VVMNjyUyNjTP8DXYuuAjkWuUG1S1KG4XSm72\" height={250} width={250} alt=\"nfts\"/></center></>)\n                                          }\n                                        </div>\n                                          <Card.Content>\n                                              <Card.Header style={{'overflowWrap': 'break-word'}}>{candidate.name +\"@gmail.com\"}</Card.Header>\n                                              <Card.Meta>\n                                                  <strong>{candidate.approved ? \"Candidate\" : \"Voter\"}</strong>\n                                              </Card.Meta>\n                                              <Card.Description>\n                                                  <span className=\"name\">Username: <b className=\"name\"> {candidate.name} </b> </span>\n                                                  <br/><br/>\n                                                  <Button id={candidate.id} color=\"blue\" size='large' onClick={(e) => this.approve(e)}>Approve</Button>\n                                              </Card.Description>\n                                          </Card.Content>\n                                          <Card.Content extra>\n                                              <Message size='mini'>\n                                                  {candidate.candidate_address}\n                                              </Message>\n                                          </Card.Content>\n                                      </Card>\n                                  </Grid.Column>\n                                </>\n                              )\n                              })\n                          )\n\n                        }\n\n                      </Grid.Row>\n                    </Grid>\n                      </>\n                    )\n                 }\n               </Grid.Row>\n             </Grid>\n        </div>\n        );\n    }\n}\n\nexport default Admin;\n","import React, { Component } from 'react';\nimport { Card, Grid, Button, Message, Icon } from 'semantic-ui-react';\nimport '../App.css';\nimport CountdownTimer from './CountdownTimer';\nimport LoadingAnimation from 'react-circle-loading-animation';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass Voting extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n\n    this.state = {\n      disable: 0,\n      buttonText: 'Vote',\n      approved: false,\n      approved_candidates: [],\n      color: \"green\",\n      voted: false,\n      votingProcess: false,\n      votingResult: [1],\n      voted_id:1,\n      buttonText: \"Vote\",\n      display_results: false,\n      results_button_text: 'Show Results',\n      claim_gift_text: 'Claim Gift',\n      claim_gift_button: \"blue\",\n      claim_gift_disabled: false,\n      votingPeriod: false,\n      gift_claimed: false,\n      isloading:false,\n      userId: window.localStorage.getItem('userId') || '',\n      dateNow: Math.floor((new Date().getTime())/1000)\n\n    }\n  }\n    componentDidMount = async () => {\n      this._isMounted = true;\n\n      this.fetch_candidates_data();\n      this.hasVoted();\n      this.interval = setInterval(() => this.setState({dateNow : Math.floor((new Date().getTime())/1000)}), 1000);\n    }\n    componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n\n    fetch_candidates_data = async() => {\n        var candidates_count = await this.props.contract.methods.candidatesCount().call({ from: this.props.account });\n        var startTime = await this.props.contract.methods.startTime().call({ from: this.props.account });\n        var endTime = await this.props.contract.methods.endTime().call({ from: this.props.account });\n        var votingProcess = await this.props.contract.methods.votingProcess().call({ from: this.props.account });\n        var gift_claimed = await this.props.contract.methods.gift_claimed().call({ from: this.props.account });\n\n        this.setState({\n          candidates_count: Number(candidates_count),\n          startTime: Number(startTime),\n          endTime: Number(endTime),\n          votingProcess: votingProcess,\n          gift_claimed : gift_claimed\n        });\n\n        var arr = [];\n        for(var i=1; i<= this.state.candidates_count; i++ )\n        {\n          var candidate = await this.props.contract.methods.candidates(i).call({ from: this.props.account });\n          if(candidate.approved)\n          {\n            arr.push(candidate);\n          }\n        }\n\n        this.setState({approved_candidates: arr});\n        console.log(this.state);\n    }\n\n    fetch_election_results = async() =>{\n      if (!this.state.display_results)\n      {\n        var result = {};\n        var voting_result=[];\n        for(var i=1; i<= this.state.candidates_count; i++ )\n        {\n          var candidate = await this.props.contract.methods.candidates(i).call({ from: this.props.account });\n          if(candidate.approved)\n          {\n            result[candidate.id] = Number(candidate.voteCount);\n          }\n        }\n        var keys = Object.keys(result);\n        voting_result = keys.sort(function(a, b) { return result[b] - result[a] }).map(Number);\n        if (result[voting_result[0]] === result[voting_result[1]])\n        {\n          voting_result = voting_result.slice(0,2);\n        }\n        else\n        {\n          voting_result = voting_result.slice(0,1);\n        }\n        this.setState({votingResult: voting_result, display_results: !this.state.display_results});\n        this.state.display_results ? this.setState({results_button_text: 'Hide Results'}): this.setState({results_button_text: 'Show Results'});\n      }\n      else\n      {\n        this.setState({display_results: !this.state.display_results});\n        this.state.display_results ? this.setState({results_button_text: 'Show Results'}): this.setState({results_button_text: 'Hide Results'});\n      }\n\n    }\n\n    hasVoted = async(id) =>{\n      var voted = await this.props.contract.methods.voters(this.props.account).call({ from: this.props.account });\n      this.setState({voted: voted, voted_id: id});\n    }\n\n    cast_vote = async (event) => {\n       this.setState({isloading: true});\n       event.persist();\n       await this.props.contract.methods.vote(event.target.id).send({ from: this.props.account}).then(()=>{\n         this.setState({isloading: false});\n       }).catch(e => {\n         if (e.code === 4001){\n            this.setState({isloading: false});\n            toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n         }\n         else if (e.code === -32603)\n         {\n           this.setState({isloading: false});\n           var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n          toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n         }\n       });\n       this.hasVoted(event.target.id);\n    }\n\n    claim_gift = async (candidate_id) =>{\n      this.setState({isloading: true});\n      await this.props.contract.methods.claim_gift(candidate_id).send({ from: this.props.account, gas: '4700000' }).then(()=>{\n        this.setState({isloading: false,claim_gift_text: \"1 Ether Received\", claim_gift_disabled: true, gift_claimed: true});\n      }).catch(e => {\n        if (e.code === 4001){\n           this.setState({isloading: false});\n           toast.error('Transaction Rejected!!!', {hideProgressBar: true,theme: \"white\"});\n        }\n        else if (e.code === -32603)\n        {\n          this.setState({isloading: false});\n          var error_msg = JSON.parse( e.message.split('\\'')[1])[\"value\"][\"data\"][\"message\"].split('revert')[1];\n         toast.error(error_msg, {hideProgressBar: true,theme: \"white\"});\n        }\n      });\n    }\n\n\n    render() {\n        return (\n            <div className='user-account'>\n              <ToastContainer toastStyle={{ backgroundColor: \"#327F94\" }}/>\n              <LoadingAnimation isLoading={this.state.isloading} />\n              <Grid stackable>\n                  {this.state.approved_candidates.length === 0 ? <h1 className=\"header\">Awaiting Election</h1> :\n                  <Grid.Row>\n                  <>\n                    <Grid columns={this.state.approved_candidates.length <= 3 ? this.state.approved_candidates.length : 4} divided>\n                        <Grid.Row centered>\n                          <Grid.Column className=\"textCenter\">\n                            {this.state.voted? <h1 className=\"header\">Vote Recorded</h1>\n                              :(this.state.endTime < this.state.dateNow && this.state.endTime !== 0 ?  <h1 className=\"header\">Election Results</h1>\n                              : this.state.endTime < this.state.dateNow && this.state.endTime == 0 ? <h1 className=\"header\">Awaiting Election</h1>\n                              : <h1 className=\"header\">Cast your vote</h1> )\n                            }\n                          </Grid.Column>\n                        </Grid.Row>\n                        {this.state.votingProcess ?\n                          <Grid.Row centered>\n                            <Grid.Column>\n                              <CountdownTimer targetDate={this.state.endTime} votingProcess={this.state.votingProcess} />\n                            </Grid.Column>\n                          </Grid.Row>\n                          : null\n                        }\n                        {(this.state.votingProcess && this.state.endTime < this.state.dateNow) ?\n                          <Grid.Row centered>\n                            <Grid.Column className=\"textCenter\">\n                              {(this.state.votingProcess && this.state.endTime < this.state.dateNow) ? <Button color= \"green\" size=\"large\" onClick={()=> this.fetch_election_results()}>{this.state.results_button_text}</Button>: null}\n                            </Grid.Column>\n                          </Grid.Row>\n                        : null\n                        }\n                        <Grid.Row>\n                          {\n                            this.state.approved_candidates.map((candidate, index) => {\n                              return(\n                                  <Grid.Column key={index} className=\"pads\" >\n                                    {\n                                      this.state.votingResult.length === 1 ?\n                                      (\n                                        <>\n                                          <Card fluid className={(this.state.votingResult[0] == candidate.id && this.state.display_results && this.state.approved_candidates.length > 2) ? 'electionWinner'\n                                            : (this.state.votingResult[0] == candidate.id && this.state.display_results && this.state.approved_candidates.length == 2) ? 'electionWinner1':\n                                            (this.state.approved_candidates.length == 2 ? \"userAccount\" : \"adminCards\")\n                                          }>\n                                              <div className=\"display\" style={{\"margin\": 10}}>\n                                                { candidate.image_addr.length !== 0\n                                                  ? (<><center><img src={candidate.image_addr} height={250} width={this.state.approved_candidates.length<=2 ? 380 : 280} alt=\"nfts\"/></center></>)\n                                                  : (<><center><img src=\"https://ipfs.infura.io/ipfs/QmRLQCfLJ8VVMNjyUyNjTP8DXYuuAjkWuUG1S1KG4XSm72\" height={250} width={250} alt=\"nfts\"/></center></>)\n                                                }\n                                              </div>\n                                            <Card.Content>\n\n                                                <Card.Header style={{'overflowWrap': 'break-word'}}>{candidate.name + \"@gmail.com\"}</Card.Header>\n\n                                                <Card.Meta>\n                                                    <strong>{candidate.approved ? \"Candidate\" : \"Voter\"}</strong>\n                                                </Card.Meta>\n                                                <Card.Description>\n                                                  <span className=\"name\">Username: <b className=\"name\"> {candidate.name} </b> </span>\n                                                    <br/>\n                                                    <br/>\n\n                                                    {\n                                                      (this.state.votingProcess && !this.state.voted && (this.state.endTime > this.state.dateNow) ) ?\n                                                      <Button id={candidate.id} color=\"green\" size='large' onClick={(event)=> this.cast_vote(event)}>Vote</Button>\n                                                      :\n                                                        ((this.state.voted_id === candidate.id) && this.state.voted)  ? <Button id={candidate.id} disabled color=\"green\" size='large' >Voted</Button>: null\n                                                    }\n\n                                                </Card.Description>\n                                                {\n                                                  ((this.state.votingResult[0] == candidate.id && this.state.display_results)?\n                                                    (\n                                                      <>\n                                                      <Grid.Row>\n                                                        <Grid.Column className=\"textCenter\">\n                                                          {this.state.gift_claimed ?\n                                                            <Button disabled=\"true\" className=\"claim_gift\" size='large'><Icon name=\"check\"/>1 Ether Received</Button>\n                                                              :\n                                                              (<>\n                                                                {(this.state.userId === candidate.id) ?\n                                                                  (<>\n                                                                    <Button disabled={this.state.claim_gift_disabled} color=\"blue\" className={this.state.claim_gift_disabled ? \"claim_gift\" : null} size='large' onClick={()=> this.claim_gift(candidate.id)}>{this.state.claim_gift_disabled ? <Icon name=\"check\"/> : null}{this.state.claim_gift_text}</Button>\n                                                                    </>)\n                                                                  : null }\n                                                              </>)\n                                                            }\n\n                                                        </Grid.Column>\n                                                      </Grid.Row>\n                                                      </>\n                                                    )\n                                                    :\n                                                    null\n                                                  )\n                                                }\n                                            </Card.Content>\n                                            <Card.Content extra>\n                                                <Message size='mini'>\n                                                    {this.state.display_results? <><span className=\"voting\">Vote Count: <b className=\"vote_count\"> {candidate.voteCount} </b></span> <br/></> : null}\n                                                    {candidate.candidate_address}\n                                                </Message>\n                                            </Card.Content>\n                                          </Card>\n                                        </>\n                                      )\n                                      :\n                                      (\n                                        <>\n                                        <Card fluid className={((this.state.votingResult[0] == candidate.id || this.state.votingResult[1] == candidate.id) && this.state.display_results) ? 'electionWinner' : (this.state.approved_candidates.length <= 2 ? \"userAccount\" : null)}>\n                                          <div className=\"display\" style={{\"margin\": 10}}>\n                                            { candidate.image_addr.length !== 0\n                                              ? (<><center><img src={candidate.image_addr} height={250} width={this.state.approved_candidates.length<=2 ? 280 : 250} alt=\"nfts\"/></center></>)\n                                              : (<><center><img src=\"https://ipfs.infura.io/ipfs/QmRLQCfLJ8VVMNjyUyNjTP8DXYuuAjkWuUG1S1KG4XSm72\" height={250} width={this.state.approved_candidates.length<=2 ? 480 : 250} alt=\"nfts\"/></center></>)\n                                            }\n                                          </div>\n                                          <Card.Content>\n                                            {\n                                              (((this.state.votingResult[0] == candidate.id || this.state.votingResult[1] == candidate.id) && this.state.display_results)?\n                                              (\n                                                <>\n                                                  <Grid.Row>\n                                                    <Grid.Column floated=\"right\">\n                                                      <span className=\"name\"> <b className=\"tie\"> TIE </b></span>\n                                                    </Grid.Column>\n                                                  </Grid.Row>\n                                                </>\n                                              )\n\n                                              : null)\n                                            }\n                                              <Card.Header>{candidate.name}</Card.Header>\n                                              <Card.Meta>\n                                                  <strong>{candidate.approved ? \"Candidate\" : \"Voter\"}</strong>\n                                              </Card.Meta>\n                                              <Card.Description>\n                                                <span className=\"name\">Username: <b className=\"name\"> {candidate.name} </b> </span>\n                                              </Card.Description>\n                                              </Card.Content>\n                                              <Card.Content extra>\n                                                  <Message size='mini'>\n                                                      {this.state.display_results? <span className=\"voting\">Vote Count: <b className=\"vote_count\"> {candidate.voteCount} </b></span> : null}\n                                                      {candidate.candidate_address}\n                                                  </Message>\n                                              </Card.Content>\n\n                                        </Card>\n                                        </>\n                                      )\n                                    }\n\n                                  </Grid.Column>\n                                )\n                            })\n\n                          }\n                        </Grid.Row>\n                    </Grid>\n                  </>\n                </Grid.Row>\n                }\n            </Grid>\n          </div>\n        );\n    }\n}\n\nexport default Voting;\n","import React, { Component } from \"react\";\nimport web3Connection from './web3Connection';\nimport Contract from './Contract';\nimport Election from './Election';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Menu, Divider } from \"semantic-ui-react\";\nimport { BrowserRouter, Switch, Route, Link, Redirect } from 'react-router-dom';\nimport Home from './components/Home';\nimport SignUp from \"./components/SignUp\";\nimport SignIn from \"./components/SignIn\"\nimport SignOut from \"./components/SignOut\";\nimport UserAccount from './components/UserAccount';\nimport Admin from './components/Admin';\nimport Voting from './components/Voting';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      web3: null,\n      account: null,\n      admin_address: null,\n      auth_contract: null,\n      election_contract: null,\n      balance: null,\n      activeItem: 'home',\n      color: 'teal',\n      signedUp: false,\n      loggedIn: window.localStorage.getItem('loggedIn') || false ,\n      username: window.localStorage.getItem('username') || ''\n    };\n  }\n\n\n  handleItemClick = (e, { name }) => {this.setState({ activeItem: name, color: 'teal' });}\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await web3Connection();\n      const auth_contract = await Contract(web3);\n      const election_contract = await Election(web3);\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const admin_address_upper = await election_contract.methods.contract_owner().call({ from: accounts[0].toLowerCase()});\n      const admin_address = admin_address_upper.toLowerCase();\n\n      this.setState({ web3, auth_contract, election_contract, account: accounts[0], admin_address }, this.start);\n\n    } catch (error) {\n      alert(\n        `Connect to MetaMask Ropsten Network`,\n      );\n      console.error(error);\n    }\n\n    await this.getAccount();\n  };\n\n  start = async () => {\n    await this.getAccount();\n    const { web3, auth_contract, election_contract, account, admin_address } = this.state;\n  };\n\n  getAccount = async () => {\n    if (this.state.web3 !== null || this.state.web3 !== undefined) {\n      await window.ethereum.on('accountsChanged', async (accounts) => {\n        this.setState({\n          account: accounts[0],\n          loggedIn: false\n        });\n        window.localStorage.removeItem('loggedIn');\n        window.localStorage.removeItem('username');\n\n      });\n    }\n  }\n\n  accountCreated = async (signedUp) => {\n    this.setState({ signedUp });\n  }\n\n  userSignedIn = async (loggedIn, username) => {\n    this.setState({ loggedIn, username });\n    window.localStorage.setItem('loggedIn', loggedIn );\n    window.localStorage.setItem('username', username );\n\n  }\n\n  loggedOut = async (loggedIn) => {\n    this.setState({loggedIn});\n    window.localStorage.removeItem('loggedIn');\n    window.localStorage.removeItem('username');\n    window.localStorage.removeItem('userId' );\n  }\n\n  render() {\n    const { activeItem, color } = this.state;\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"main-page\">\n          <BrowserRouter>\n            <div className=\"home-nav\">\n              <Menu inverted secondary size='large'>\n\n                {\n                  this.state.loggedIn ?\n                    (\n                      <>\n                        <Menu.Item\n                          name='home'\n                          color={color}\n                          active={activeItem === 'home'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp'\n                        />\n                        {(this.state.admin_address === this.state.account) ?\n                          <Menu.Item\n                            name='admin'\n                            color={color}\n                            active={activeItem === 'admin'}\n                            onClick={this.handleItemClick}\n                            as={Link}\n                            to='/e-Voting-dApp/admin'\n                          />:\n                          null\n                        }\n                        <Menu.Item\n                          name='cast vote'\n                          color={color}\n                          active={activeItem === 'cast vote'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp/vote'\n                        />\n                      <Menu.Menu position='right'>\n                        <Menu.Item\n                          position='right'\n                          name='user account'\n                          color={color}\n                          active={activeItem === 'user account'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp/user-account'\n                        />\n                        <Menu.Item\n                          position='right'\n                          name='sign out'\n                          color={color}\n                          active={activeItem === 'sign out'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp/sign-out'\n                        />\n                      </Menu.Menu>\n                      </>\n                      )\n                    :\n                    (\n                      <>\n                        <Menu.Item\n                          name='home'\n                          color={color}\n                          active={activeItem === 'home'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp'\n                        />\n                      <Menu.Menu position='right'>\n                        <Menu.Item\n                          position='right'\n                          name='sign in'\n                          color={color}\n                          active={activeItem === 'sign in'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp/sign-in'\n                        />\n                        <Menu.Item\n                          position='right'\n                          name='sign up'\n                          color={color}\n                          active={activeItem === 'sign up'}\n                          onClick={this.handleItemClick}\n                          as={Link}\n                          to='/e-Voting-dApp/sign-up'\n                        />\n                      </Menu.Menu>\n                      </>\n                    )\n                }\n              </Menu>\n            </div>\n\n            <Divider inverted />\n            <Switch>\n              {\n                <Route path='/e-Voting-dApp/sign-in' >\n                  {\n                    this.state.loggedIn ?\n                      <Redirect to='/e-Voting-dApp/user-account' />\n                      :\n                      <SignIn\n                        web3={this.state.web3}\n                        contract={this.state.auth_contract}\n                        account={this.state.account}\n                        signedUp={this.state.signedUp}\n                        userSignedIn={this.userSignedIn}\n                      />\n                  }\n                </Route>\n              }\n              {\n                <Route path='/e-Voting-dApp/sign-up' >\n                  {\n                    this.state.loggedIn ?\n                      <Redirect to='/e-Voting-dApp/user-account' />\n                      :\n                      <SignUp\n                        web3={this.state.web3}\n                        contract={this.state.auth_contract}\n                        account={this.state.account}\n                        accountCreated={this.accountCreated}\n                      />\n                  }\n                </Route>\n              }\n              {\n                  this.state.loggedIn ?\n                  (\n                    <>\n                      <Route exact path='/e-Voting-dApp' >\n                        <Home />\n                      </Route>\n                      <Route path='/e-Voting-dApp/sign-out'>\n                        <SignOut\n                          loggedOut={this.loggedOut}\n                        />\n                        You've been logged out\n                        <br></br>\n                        Thank you\n                      </Route>\n                      <Route path='/e-Voting-dApp/user-account' >\n                        <UserAccount\n                          account={this.state.account}\n                          username={this.state.username}\n                          contract={this.state.election_contract}\n                        />\n                      </Route>\n                      {\n                        this.state.admin_address === this.state.account ?\n                        <Route path='/e-Voting-dApp/admin' >\n                          <Admin\n                            account={this.state.account}\n                            username={this.state.username}\n                            contract={this.state.election_contract}\n                          />\n                        </Route>\n                        :\n                        null\n                      }\n                      <Route path='/e-Voting-dApp/vote' >\n                        <Voting\n                          account={this.state.account}\n                          username={this.state.username}\n                          contract={this.state.election_contract}\n                        />\n                      </Route>\n                    </>\n                  )\n                  :\n                  (\n                    <>\n                      <Route exact path='/e-Voting-dApp' >\n                        <Home />\n                      </Route>\n                      <Route path='/e-Voting-dApp/sign-out'>\n                        <SignOut loggedOut={this.loggedOut}/>\n                      </Route>\n                      <Route path='/e-Voting-dApp/user-account'>\n                        <h1 className=\"header\">You have been logged out</h1>\n                      </Route>\n                      <Route path='/ae-Voting-dApp/dmin'>\n                        <h1 className=\"header\">You have been logged out</h1>\n                      </Route>\n                      <Route path='/e-Voting-dApp/vote'>\n                        <h1 className=\"header\">You have been logged out</h1>\n                      </Route>\n                    </>\n                  )\n              }\n\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/e-Voting-dApp\">\n     <App />\n   </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}