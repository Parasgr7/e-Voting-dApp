{"ast":null,"code":"import SignData from './SignData';\n\nconst AuthValidation = async (username, accountAddress, password, digiCode, web3, contract) => {\n  let userAddress = await contract.methods.getUserAddress().call({\n    from: accountAddress\n  });\n\n  if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\n    return false;\n  } else {\n    let signedData = await SignData(username, accountAddress, web3);\n    let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\n    let hash = await web3.eth.accounts.hashMessage(signedData + passwordDigiCodeHash); // get hash from the contract\n\n    let hashFromContract = await contract.methods.getSignatureHash().call({\n      from: accountAddress\n    });\n\n    if (hash === hashFromContract) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nexport default AuthValidation;","map":{"version":3,"names":["SignData","AuthValidation","username","accountAddress","password","digiCode","web3","contract","userAddress","methods","getUserAddress","call","from","toLowerCase","signedData","passwordDigiCodeHash","eth","accounts","hashMessage","hash","hashFromContract","getSignatureHash"],"sources":["/Users/paras/Documents/blockchain-based-authentication/client/src/utils/AuthValidation.js"],"sourcesContent":["import SignData from './SignData';\n\nconst AuthValidation = async (username, accountAddress, password, digiCode, web3, contract) => {\n\n    let userAddress = await contract.methods.getUserAddress().call({ from: accountAddress });\n\n    if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\n        return false;\n    } else {\n        let signedData = await SignData(username, accountAddress, web3);\n        let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\n\n        let hash = await web3.eth.accounts.hashMessage(signedData + passwordDigiCodeHash);\n\n        // get hash from the contract\n        let hashFromContract = await contract.methods.getSignatureHash().call({ from: accountAddress });\n\n        if (hash === hashFromContract) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default AuthValidation;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqDC,IAArD,EAA2DC,QAA3D,KAAwE;EAE3F,IAAIC,WAAW,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,cAAjB,GAAkCC,IAAlC,CAAuC;IAAEC,IAAI,EAAET;EAAR,CAAvC,CAAxB;;EAEA,IAAIK,WAAW,CAACK,WAAZ,OAA8BV,cAAc,CAACU,WAAf,EAAlC,EAAgE;IAC5D,OAAO,KAAP;EACH,CAFD,MAEO;IACH,IAAIC,UAAU,GAAG,MAAMd,QAAQ,CAACE,QAAD,EAAWC,cAAX,EAA2BG,IAA3B,CAA/B;IACA,IAAIS,oBAAoB,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8Bd,QAAQ,GAAGC,QAAzC,CAAjC;IAEA,IAAIc,IAAI,GAAG,MAAMb,IAAI,CAACU,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8BJ,UAAU,GAAGC,oBAA3C,CAAjB,CAJG,CAMH;;IACA,IAAIK,gBAAgB,GAAG,MAAMb,QAAQ,CAACE,OAAT,CAAiBY,gBAAjB,GAAoCV,IAApC,CAAyC;MAAEC,IAAI,EAAET;IAAR,CAAzC,CAA7B;;IAEA,IAAIgB,IAAI,KAAKC,gBAAb,EAA+B;MAC3B,OAAO,IAAP;IACH,CAFD,MAEO;MACH,OAAO,KAAP;IACH;EACJ;AACJ,CArBD;;AAuBA,eAAenB,cAAf"},"metadata":{},"sourceType":"module"}